<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构与算法之树</title>
      <link href="/2019/11/23/shu-ju-jie-gou-yu-suan-fa-zhi-shu/"/>
      <url>/2019/11/23/shu-ju-jie-gou-yu-suan-fa-zhi-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、树"><a href="#一、树" class="headerlink" title="一、树"></a>一、树</h1><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>树(Tree)是n(n&gt;=0)个结点的有限集。当n=0时成为空树，在任意一颗非空树中：</p><ul><li>有且仅有一个特定的称为根(Root)的结点;</li><li>当n&gt;1时，其余节点可分为m(m&gt;0)个<strong>互不相交</strong>的有限集T1、T2、。。。、Tm, 其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)。</li></ul><h2 id="结点的分类"><a href="#结点的分类" class="headerlink" title="结点的分类"></a>结点的分类</h2><p>结点拥有的子树称为结点的度(Degree), 树的度取树内各结点的度的最大值。</p><ul><li>度为0的结点称为叶结点(Leaf)或终端结点；</li><li>度不为0的点称为分支结点或非终端结点，除根结点外，分支结点也称为内部结点。</li></ul><h2 id="结点间的关系"><a href="#结点间的关系" class="headerlink" title="结点间的关系"></a>结点间的关系</h2><ul><li>结点的子树的根称为结点的孩子(Child), 相应的，该结点称为孩子的双亲(Parent), 同一双亲的孩子之间互称为兄弟(Sibling)。</li><li>结点的祖先是从根到该结点所经过分支上的所有结点。</li></ul><h2 id="结点的层次"><a href="#结点的层次" class="headerlink" title="结点的层次"></a>结点的层次</h2><ul><li>结点的层次(Level)从根开始，根为第一层，根的孩子为第二层。</li><li>其双亲在同一层的结点互为堂兄弟。</li><li>树中结点最大层称为树的深度(Depth)或者高度。</li></ul><h2 id="有序树和森林"><a href="#有序树和森林" class="headerlink" title="有序树和森林"></a>有序树和森林</h2><ul><li>如果将树中结点的各个子树看成从左至右是有次序的，不能互换的，则称该树为有序树，否则称为无序树。</li><li>森林(Forest)是m(m&gt;=0)棵互不相交的树的集合。对树中每个结点而言，其子树的集合即为森林。</li></ul><h2 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h2><h3 id="1-双亲表示法"><a href="#1-双亲表示法" class="headerlink" title="1.双亲表示法"></a>1.双亲表示法</h3><ul><li><p>双亲表示法，言外之意就是以双亲作为索引的关键词的一种存储方式。</p></li><li><p>我们假设以一组连续空间存储树的结点，同时在每个结点中，附设一个指示双亲结点在数组中位置的元素。</p></li><li><p>也就是说，每个结点除了知道自己是谁，还知道它的双亲在哪里。</p></li><li><p>那么我们可以做如下定义:</p><pre class="line-numbers language-c++"><code class="language-c++">// 树的双亲表示法结构定义#define MAX_TREE_SIZE 100typedef int ElemType;typedef struct PTNode{    ElemType data; // 结点数据    int parent;     // 双亲位置} PTNode;typedef struct{    PTNode nodes[MAX_TREE_SIZE];    int r;        // 根的位置    int n;        // 结点数目} PTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="parents.png" alt></p></li><li><p>这样的存储结构，我们可以根据某结点的parent指针找到它的双亲结点，所用的时间复杂度是O(1), 索引到parent的值为-1时，表示找到了树结点的根。</p></li><li><p>可是，如果我们要知道某结点的孩子是什么？那么不好意思，请遍历整个树结构。</p></li><li><p>改进一些也很简单，只需要在每个结点中添加孩子的索引</p></li></ul><h3 id="2-孩子表示法"><a href="#2-孩子表示法" class="headerlink" title="2.孩子表示法"></a>2.孩子表示法</h3><ul><li><p>方案一：根据树的度，声明足够空间存放子树的结点。缺点十分明显，就是造成了浪费！</p><p><img src="childs01.png" alt></p></li><li><p>方案二：根据每个结点的度申请空间存放子树结点。</p><p><img src="childs02.png" alt></p></li><li><p>方案三:  数组和链表结合</p><p><img src="childs03.png" alt></p></li></ul><h3 id="3-双亲孩子表示法"><a href="#3-双亲孩子表示法" class="headerlink" title="3.双亲孩子表示法"></a>3.双亲孩子表示法</h3><p>​    前两种方案结合</p><p>​    <img src="parchild.png" alt></p><pre class="line-numbers language-c++"><code class="language-c++">#define MAX_TREE_SIZE 100// 孩子节点typedef struct CTNode{    int child;  // 孩子结点下标    struct CTNode *next; // 指向下一个孩子的指针} *ChildPtr;// 表头结构typedef struct{    ElemType data;  // 存放在树中的结点的数据    int parent;        // 存放双亲的下标    ChildPtr firstchild; // 指向第一个孩子的指针} CTBox;// 树结构typedef struct{    CTBox nodes[MAX_TREE_SIZE]; // 结点数组    int r;        // 根的位置    int n;        // 结点数目}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、二叉树"><a href="#二、二叉树" class="headerlink" title="二、二叉树"></a>二、二叉树</h1><h1 id="三、动态查找树"><a href="#三、动态查找树" class="headerlink" title="三、动态查找树"></a>三、动态查找树</h1><h2 id="一）二叉查找树"><a href="#一）二叉查找树" class="headerlink" title="一）二叉查找树"></a>一）二叉查找树</h2><h2 id="二）平衡二叉树-AVL树"><a href="#二）平衡二叉树-AVL树" class="headerlink" title="二）平衡二叉树(AVL树)"></a>二）平衡二叉树(AVL树)</h2><h2 id="三）红黑树"><a href="#三）红黑树" class="headerlink" title="三）红黑树"></a>三）红黑树</h2><h1 id="四、多路查找树"><a href="#四、多路查找树" class="headerlink" title="四、多路查找树"></a>四、多路查找树</h1><h2 id="一）B树"><a href="#一）B树" class="headerlink" title="一）B树"></a>一）B树</h2><h2 id="二）B-树"><a href="#二）B-树" class="headerlink" title="二）B+树"></a>二）B+树</h2><h2 id="三）B-树"><a href="#三）B-树" class="headerlink" title="三）B*树"></a>三）B*树</h2><h2 id="四）R树"><a href="#四）R树" class="headerlink" title="四）R树"></a>四）R树</h2><h1 id="五、决策树"><a href="#五、决策树" class="headerlink" title="五、决策树"></a>五、决策树</h1><h1 id="六-、LeetCode关于树的题目"><a href="#六-、LeetCode关于树的题目" class="headerlink" title="六 、LeetCode关于树的题目"></a>六 、<code>LeetCode</code>关于树的题目</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tree </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake用法总结</title>
      <link href="/2019/11/18/cmake-yong-fa-zong-jie/"/>
      <url>/2019/11/18/cmake-yong-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="一、CMake的作用"><a href="#一、CMake的作用" class="headerlink" title="一、CMake的作用"></a>一、<code>CMake</code>的作用</h1><p>大家都知道, 源文件的编译步骤为:</p><ul><li>预处理: 宏定义展开, 头文件展开, 条件编译</li><li>编译: 检查语法, 生成编译文件</li><li>汇编: 将汇编文件生成目标文件(二进制文件)</li><li>链接: 将目标文件链接成目标程序</li></ul><p>但如果源文件太多，一个一个编译就会特别麻烦，为什么不批处理编译源文件呢，于是就有了make工具，它是一个自动化编译工具，你可以使用一条命令实现完全编译。还可以指定文件编译的顺序。但是使用make编译源码，需要编写一个规则文件，make依据它来批处理编译，这个文件就是makefile，所以编写makefile文件也是一个程序员所必备的技能。<br> 对于一个大工程，编写makefile实在是件复杂的事，于是人们又想，为什么不设计一个工具，读入所有源文件之后，自动生成makefile呢，于是就出现了<code>cmake</code>工具，它能够输出各种各样的makefile或者project文件,从而帮助程序员减轻负担。但是随之而来也就是编写cmakelist文件，它是cmake所依据的规则。所以在编程的世界里没有捷径可走，还是要脚踏实地的。</p><p> 原文件－－camkelist —cmake —makefile —make —生成可执行文件</p><h1 id="二、CMake基本语法规则"><a href="#二、CMake基本语法规则" class="headerlink" title="二、CMake基本语法规则"></a>二、<code>CMake基本语法规则</code></h1><ol><li><p>变量使用${}方式取值，但是在 IF 控制语句中是直接使用变量名</p></li><li><p>指令(参数1  参数2  …)</p><p>参数使用括弧括起，参数之间使用空格或分号分开</p></li><li><p>指令是大小写无关的，参数和变量是大小写相关的。推荐全部使用大写指令</p></li><li><p>关于双引号的疑惑</p><pre class="line-numbers language-shell"><code class="language-shell">SET(SRC_LIST main.c)也可以写成 SET(SRC_LIST “main.c”)是没有区别的，但是假设一个源文件的文件名是 fu nc.c(文件名中间包含了空格)。这时候就必须使用双引号，如果写成了 SET(SRC_LIST fu nc.c)，就会出现错误，提示你找不到 fu 文件和 nc.c 文件。这种情况，就必须写成:SET(SRC_LIST “fu nc.c”)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="三、内部构建与外部构建"><a href="#三、内部构建与外部构建" class="headerlink" title="三、内部构建与外部构建"></a>三、内部构建与外部构建</h1><p>内部构建就是在项目跟目录直接编译</p><p>引出了我们对外部编译的探讨，外部编译的过程如下：</p><ol><li>首先，请清除 t1 目录中除 main.c CmakeLists.txt 之外的所有中间文件，最关键的是 CMakeCache.txt。</li><li>在 t1 目录中建立 build 目录，当然你也可以在任何地方建立 build 目录，不一定必须在工程目录中。</li><li>进入 build 目录，运行 cmake ..(注意,..代表父目录，因为父目录存在我们需要的CMakeLists.txt，如果你在其他地方建立了 build 目录，需要运行 cmake &lt;工程的全路径&gt;)，查看一下 build 目录，就会发现了生成了编译需要的 Makefile 以及其他的中间文件.</li><li>运行 make 构建工程，就会在当前目录(build 目录)中获得目标文件 hello。</li><li>上述过程就是所谓的 out-of-source 外部编译，一个最大的好处是，对于原有的工程没有任何影响，所有动作全部发生在编译目录。通过这一点，也足以说服我们全部采用外部编译方式构建工程。</li><li>这里需要特别注意的是：<br>通过外部编译进行工程构建，HELLO_SOURCE_DIR 仍然指代工程路径，即/backup/cmake/t1, 而 HELLO_BINARY_DIR 则指代编译路径，即/backup/cmake/t1/build</li></ol><p>#　四、安装库和INSTALL指令</p><p>有两种安装方式，一种是从代码编译后直接 make install 安装，一种是cmake的install 指令安装。</p><h2 id="1、make-install"><a href="#1、make-install" class="headerlink" title="1、make install"></a>1、<code>make install</code></h2><pre class="line-numbers language-shell"><code class="language-shell">DESTDIR=install:    mkdir -p $(DESTDIR)/usr/bin    install -m 755 hello $(DESTDIR)/usr/bin你可以通过:    make install将 hello 直接安装到/usr/bin 目录，也可以通过 make installDESTDIR=/tmp/test 将他安装在/tmp/test/usr/bin 目录，打包时这个方式经常被使用。稍微复杂一点的是还需要定义 PREFIX，一般 autotools 工程，会运行这样的指令:./configure –prefix=/usr 或者./configure --prefix=/usr/local 来指定PREFIX比如上面的 Makefile 就可以改写成:DESTDIR=PREFIX=/usrinstall:    mkdir -p $(DESTDIR)/$(PREFIX)/bin    install -m 755 hello $(DESTDIR)/$(PREFIX)/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、cmake-INSTALL指令安装"><a href="#2、cmake-INSTALL指令安装" class="headerlink" title="2、cmake INSTALL指令安装"></a>2、<code>cmake INSTALL</code>指令安装</h2><p>这里需要引入一个新的 cmake 指令 INSTALL 和一个非常有用的变量<br>CMAKE_INSTALL_PREFIX。CMAKE_INSTALL_PREFIX 变量类似于 configure 脚本的 –prefix，常见的使用方法看起来是这个样子：<br>    <code>cmake -DCMAKE_INSTALL_PREFIX=/usr ..</code><br>INSTALL 指令用于定义安装规则，安装的内容可以包括目标二进制、动态库、静态库以及文件、目录、脚本等。</p><p>INSTALL 指令包含了各种安装类型，我们需要一个个分开解释：<br>目标文件的安装：</p><pre><code>INSTALL(TARGETS targets...    [[ARCHIVE|LIBRARY|RUNTIME]    [DESTINATION &lt;dir&gt;]    [PERMISSIONS permissions...]    [CONFIGURATIONS [Debug|Release|...]]    [COMPONENT &lt;component&gt;]    [OPTIONAL]] [...])</code></pre><p>参数中的 TARGETS 后面跟的就是我们通过 ADD_EXECUTABLE 或者 ADD_LIBRARY 定义的<br>目标文件，可能是可执行二进制、动态库、静态库。<br>目标类型也就相对应的有三种，ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME<br>特指可执行目标二进制。<br>DESTINATION 定义了安装的路径，如果路径以/开头，那么指的是绝对路径，这时候<br>CMAKE_INSTALL_PREFIX 其实就无效了。如果你希望使用 CMAKE_INSTALL_PREFIX 来<br>定义安装路径，就要写成相对路径，即不要以/开头，那么安装后的路径就是<br>${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION 定义的路径&gt;<br>举个简单的例子：</p><pre class="line-numbers language-shell"><code class="language-shell">INSTALL(TARGETS myrun mylib mystaticlib    RUNTIME DESTINATION bin    LIBRARY DESTINATION lib    ARCHIVE DESTINATION libstatic)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子会将：<br>可执行二进制 myrun 安装到${CMAKE_INSTALL_PREFIX}/bin 目录<br>动态库 libmylib 安装到${CMAKE_INSTALL_PREFIX}/lib 目录<br>静态库 libmystaticlib 安装到${CMAKE_INSTALL_PREFIX}/libstatic 目录<br>特别注意的是你不需要关心 TARGETS 具体生成的路径，只需要写上 TARGETS 名称就可以<br>了。  </p><p>普通文件的安装：</p><pre class="line-numbers language-shell"><code class="language-shell">INSTALL(FILES files... DESTINATION <dir>    [PERMISSIONS permissions...]    [CONFIGURATIONS [Debug|Release|...]]    [COMPONENT <component>]    [RENAME <name>] [OPTIONAL])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径。如果<br>默认不定义权限 PERMISSIONS，安装后的权限为：<br>OWNER_WRITE, OWNER_READ, GROUP_READ,和 WORLD_READ，即 644 权限。<br>非目标文件的可执行程序安装(比如脚本之类)：</p><pre><code>INSTALL(PROGRAMS files... DESTINATION &lt;dir&gt;    [PERMISSIONS permissions...]    [CONFIGURATIONS [Debug|Release|...]]    [COMPONENT &lt;component&gt;]    [RENAME &lt;name&gt;] [OPTIONAL])</code></pre><p>跟上面的 FILES 指令使用方法一样，唯一的不同是安装后权限为:<br>OWNER_EXECUTE, GROUP_EXECUTE, 和 WORLD_EXECUTE，即 755 权限<br>目录的安装：</p><pre class="line-numbers language-shell"><code class="language-shell">INSTALL(DIRECTORY dirs... DESTINATION <dir>    [FILE_PERMISSIONS permissions...]    [DIRECTORY_PERMISSIONS permissions...]    [USE_SOURCE_PERMISSIONS]    [CONFIGURATIONS [Debug|Release|...]]    [COMPONENT <component>]    [[PATTERN <pattern> | REGEX <regex>]    [EXCLUDE] [PERMISSIONS permissions...]] [...])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里主要介绍其中的 DIRECTORY、PATTERN 以及 PERMISSIONS 参数。</p><p>DIRECTORY 后面连接的是所在 Source 目录的相对路径，但务必注意：abc 和 abc/有很大的区别。<br>如果目录名不以/结尾，那么这个目录将被安装为目标路径下的 abc，如果目录名以/结尾，代表将这个目录中的内容安装到目标路径，但不包括这个目录本身。<br>PATTERN 用于使用正则表达式进行过滤，PERMISSIONS 用于指定 PATTERN 过滤后的文件权限。<br>我们来看一个例子:</p><pre class="line-numbers language-shell"><code class="language-shell">INSTALL(DIRECTORY icons scripts/ DESTINATION     share/myprojPATTERN "CVS" EXCLUDEPATTERN "scripts/*"PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READGROUP_EXECUTE GROUP_READ)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条指令的执行结果是：<br>将 icons 目录安装到 <prefix>/share/myproj，将 scripts/中的内容安装到<prefix>/share/myproj不包含目录名为 CVS 的目录，对于 scripts/*  文件指定权限为 OWNER_EXECUTE   OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ.</prefix></prefix></p><p>安装时 CMAKE 脚本的执行：</p><pre><code>INSTALL([[SCRIPT &lt;file&gt;] [CODE &lt;code&gt;]] [...])SCRIPT 参数用于在安装时调用 cmake 脚本文件（也就是&lt;abc&gt;.cmake 文件）CODE 参数用于执行 CMAKE 指令，必须以双引号括起来。比如：INSTALL(CODE &quot;MESSAGE(\&quot;Sample install message.\&quot;)&quot;)</code></pre><h1 id="五、静态库和动态库构建"><a href="#五、静态库和动态库构建" class="headerlink" title="五、静态库和动态库构建"></a>五、静态库和动态库构建</h1><h2 id="1、ADD-LIBRARY指令"><a href="#1、ADD-LIBRARY指令" class="headerlink" title="1、ADD_LIBRARY指令"></a>1、ADD_LIBRARY指令</h2><pre class="line-numbers language-shell"><code class="language-shell">ADD_LIBRARY(libname [SHARED|STATIC|MODULE]    [EXCLUDE_FROM_ALL]    source1 source2 ... sourceN)# 不需要写全lib<libname>.so, 只需要填写<libname>,cmake系统会自动为你生成，lib<libname>.X# 类型有三种:    SHARED，动态库    .so    STATIC，静态库    .a    MODULE，在使用 dyld 的系统有效，如果不支持 dyld，则被当作 SHARED 对待。#EXCLUDE_FROM_ALL 参数的意思是这个库不会被默认构建，除非有其他的组件依赖或者手工构建。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、指定库的生成路径"><a href="#2、指定库的生成路径" class="headerlink" title="2、指定库的生成路径"></a>2、指定库的生成路径</h2><p>​    两种方法</p><ol><li>ADD_SUBDIRECTORY指令来指定一个编译输出位置</li><li>在CMakeLists.txt中添加　SET(LIBRARY_OUTPUT_PATH &lt;路径&gt;)来指定一个新的位置</li></ol><h2 id="3、同时生成动态库和静态库"><a href="#3、同时生成动态库和静态库" class="headerlink" title="3、同时生成动态库和静态库"></a>3、同时生成动态库和静态库</h2><p>因为ADD_SUBDIRECTORY的TARGET(libname)是唯一的，所以生成动态库和静态库不能指定相同的名称，想要有相同的名称需要用到SET_TARGET_PROPERTIES指令。</p><p>SET_TARGET_PROPERTIES，其基本语法是：</p><pre class="line-numbers language-shell"><code class="language-shell">SET_TARGET_PROPERTIES(target1 target2 ...    PROPERTIES prop1 value1    prop2 value2 ...)# 举例ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})　# 动态库ADD_LIBRARY(hello_static STATIC ${LIBHELLO_SRC}) # 静态库SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME "hello")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本。</p><p>与他对应的指令是：<br>    GET_TARGET_PROPERTY(VAR target property)</p><p>举例</p><pre class="line-numbers language-shell"><code class="language-shell">GET_TARGET_PROPERTY(OUTPUT_VALUE hello_static OUTPUT_NAME)MESSAGE(STATUS “This is the hello_staticOUTPUT_NAME:”${OUTPUT_VALUE})# 如果没有这个属性定义，则返回 NOTFOUND.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、动态库版本号"><a href="#4、动态库版本号" class="headerlink" title="4、动态库版本号"></a>4、动态库版本号</h2><pre class="line-numbers language-shell"><code class="language-shell">SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)# VERSION 指代动态库版本，SOVERSION 指代 API 版本。# 在 build/lib 目录会生成：    libhello.so.1.2    libhello.so.1->libhello.so.1.2    libhello.so -> libhello.so.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、使用共享库和头文件"><a href="#六、使用共享库和头文件" class="headerlink" title="六、使用共享库和头文件"></a>六、使用共享库和头文件</h1><h2 id="1-INCLUDE-DIRECTORIES指令"><a href="#1-INCLUDE-DIRECTORIES指令" class="headerlink" title="1.INCLUDE_DIRECTORIES指令"></a>1.<code>INCLUDE_DIRECTORIES</code>指令</h2><p><code>INCLUDE_DIRECTORIES([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)</code><br>这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的<br>后面，你可以通过两种方式来进行控制搜索路径添加的方式：<br>１. CMAKE_INCLUDE_DIRECTORIES_BEFORE，通过 SET 这个 cmake 变量为 on，可以将添加的头文件搜索路径放在已有路径的前面。<br>２. 通过 AFTER 或者 BEFORE 参数，也可以控制是追加还是置前。</p><h2 id="2-LINK-DIRECTORIES和-TARGET-LINK-LIBRARIES"><a href="#2-LINK-DIRECTORIES和-TARGET-LINK-LIBRARIES" class="headerlink" title="2. LINK_DIRECTORIES和 TARGET_LINK_LIBRARIES"></a>2. <code>LINK_DIRECTORIES</code>和 <code>TARGET_LINK_LIBRARIES</code></h2><pre class="line-numbers language-shell"><code class="language-shell">LINK_DIRECTORIES(directory1 directory2 ...)# 这个指令非常简单，添加非标准的共享库搜索路径，比如，在工程内部同时存在共享库和可执行二进制，在编译时就需要指定一下这些共享库的路径。# TARGET_LINK_LIBRARIES 的全部语法是:TARGET_LINK_LIBRARIES(target library1    <debug | optimized> library2...)# 这个指令可以用来为 target 添加需要链接的共享库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-FIND系列指令"><a href="#3-FIND系列指令" class="headerlink" title="3. FIND系列指令"></a>3. <code>FIND</code>系列指令</h2><ol><li><p>特殊的环境变量<code>CMAKE_INCLUDE_PATH</code> 和<code>CMAKE_LIBRARY_PATH</code></p><p>务必注意，这两个是环境变量而不是 cmake 变量</p></li><li><p><code>CMAKE_INCLUDE_PATH</code>和<code>CMAKE_LIBRARY_PATH</code>是配合<code>FIND_PATH</code>和<code>FIND_LIBRARY</code>指令使用的</p></li><li><p>find_path指令</p><pre class="line-numbers language-shell"><code class="language-shell">find_path (<VAR> NAMES name)# <VAR>查找的库文件路径报存在变量VAR中# 默认搜索路径为`CMAKE_INCLUDE_PATH`find_path (<VAR> NAMES name PATHS paths... [NO_DEFAULT_PATH])#　指定搜索路径# NO_DEFAULT_PATH　不使用默认搜索路径　# 举例为了将程序更智能一点，我们可以使用 CMAKE_INCLUDE_PATH 来进行，使用 bash 的方法如下：export CMAKE_INCLUDE_PATH=/usr/include/hello然后在头文件中将 INCLUDE_DIRECTORIES(/usr/include/hello)替换为：FIND_PATH(myHeader hello.h)IF(myHeader)    INCLUDE_DIRECTORIES(${myHeader})ENDIF(myHeader)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="4-共享库和头文件指令总结"><a href="#4-共享库和头文件指令总结" class="headerlink" title="4. 共享库和头文件指令总结"></a>4. 共享库和头文件指令总结</h2><ol><li><strong>FIND_PATH</strong> 查找头文件所在目录</li><li><strong>INCLUDE_DIRECTORIES</strong>　添加头文件目录</li><li><strong>FIND_LIBRARY</strong> 查找库文件所在目录</li><li><strong>LINK_DIRECTORIES</strong>   添加库文件目录</li><li><strong>LINK_LIBRARIES</strong>　添加需要链接的库文件路径，注意这里是全路径</li><li><em><em>TARGET_LINK_LIBRARIES </em></em>　给TARGET链接库</li></ol><h1 id="七、Find模块"><a href="#七、Find模块" class="headerlink" title="七、Find模块"></a>七、Find模块</h1><h2 id="1-Find模块使用"><a href="#1-Find模块使用" class="headerlink" title="1.Find模块使用"></a>1.Find模块使用</h2><pre class="line-numbers language-shell"><code class="language-shell">FIND_PACKAGE(XXX)IF(XXX_FOUND)    INCLUDE_DIRECTORIES(${XXX_INCLUDE_DIR})    TARGET_LINK_LIBRARIES(xxxtest ${XXX_LIBRARY})ELSE(XXX_FOUND)    MESSAGE(FATAL_ERROR ”XXX library not found”)ENDIF(XXX_FOUND)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于系统预定义的 Find<name>.cmake 模块，使用方法一般如上例所示：<br>每一个模块都会定义以下几个变量<br>    • <name>_FOUND<br>    • <name>_INCLUDE_DIR or <name>_INCLUDES<br>    • <name>_LIBRARY or <name>_LIBRARIES<br>你可以通过<name>_FOUND 来判断模块是否被找到，如果没有找到，按照工程的需要关闭某些特性、给出提醒或者中止编译</name></name></name></name></name></name></name></p><h2 id="2-find-package指令"><a href="#2-find-package指令" class="headerlink" title="2.find_package指令"></a>2.find_package指令</h2><pre class="line-numbers language-shell"><code class="language-shell">find_package(<PackageName> [QUIET] [REQUIRED] [[COMPONENTS] [components...]]             [OPTIONAL_COMPONENTS components...]             [NO_POLICY_SCOPE])# 查找并从外部项目加载设置，# <PackageName>_FOUND 将设置为指示是否找到该软件包, 如果查找到，该变量为true# [QUIET], 设置该变量，不会打印任何消息，且           <PackageName>_FIND_QUIETLY为true# [REQUIRED] 设置该变量，如果找不到软件包，该选项将停止处理并显示一条错误消息，且设置<PackageName>_FIND_REQUIRED为true,不过不指定该参数，即使没有找到，也能编译通过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>find_package采用两种模式搜索库：</p><ul><li><strong>Module模式</strong>：搜索<strong>CMAKE_MODULE_PATH</strong>指定路径下的<strong>FindXXX.cmake</strong>文件，执行该文件从而找到XXX库。其中，具体查找库并给<strong>XXX_INCLUDE_DIRS</strong>和<strong>XXX_LIBRARIES</strong>两个变量赋值的操作由FindXXX.cmake模块完成。</li><li><strong>Config模式</strong>：搜索<strong>XXX_DIR</strong>指定路径下的<strong>XXXConfig.cmake</strong>文件，执行该文件从而找到XXX库。其中具体查找库并给<strong>XXX_INCLUDE_DIRS</strong>和<strong>XXX_LIBRARIES</strong>两个变量赋值的操作由XXXConfig.cmake模块完成。</li></ul><p>两种模式看起来似乎差不多，不过cmake默认采取<strong>Module</strong>模式，如果Module模式未找到库，才会采取Config模式。如果<strong>XXX_DIR</strong>路径下找不到XXXConfig.cmake或<code>&lt;lower-case-package-name&gt;</code>config.cmake文件，则会找/usr/local/lib/cmake/XXX/中的XXXConfig.cmake文件。总之，Config模式是一个备选策略。通常，库安装时会拷贝一份XXXConfig.cmake到系统目录中，因此在没有显式指定搜索路径时也可以顺利找到。</p><p>总结：CMake搜索的顺序为: 首先在<code>CMAKE_MODULE_PATH</code>中搜索名为<code>Find&lt;PackageName&gt;.cmake</code>的文件，然后在<code>&lt;PackageName&gt;_DIR</code>名为<code>PackageName&gt;Config.cmake</code>或<code>&lt;lower-case-package-name&gt;-config.cmake</code>的文件，如果还是找不到，则会去<code>/usr/local/lib/cmake</code>中查找<code>Find&lt;PackageName&gt;.cmake</code>文件。</p><p>所以我们可以通过<code>CMAKE_MODULE_PATH</code>或<code>&lt;PackageName&gt;_DIR</code>变量指定cmake文件路径。</p><h2 id="3-自定义Find模块"><a href="#3-自定义Find模块" class="headerlink" title="3.自定义Find模块"></a>3.自定义Find模块</h2><pre class="line-numbers language-shell"><code class="language-shell"># 查找HELLO的头文件目录FIND_PATH(HELLO_INCLUDE_DIR hello.h /usr/include/hello/usr/local/include/hello)# 查找HELLO的动态库FIND_LIBRARY(HELLO_LIBRARY NAMES hello PATH /usr/lib/usr/local/lib)IF (HELLO_INCLUDE_DIR AND HELLO_LIBRARY)    SET(HELLO_FOUND TRUE)ENDIF (HELLO_INCLUDE_DIR AND HELLO_LIBRARY)IF (HELLO_FOUND)    # 如果不指定QUIET参数，就打印信息    IF (NOT HELLO_FIND_QUIETLY)        MESSAGE(STATUS "Found Hello: ${HELLO_LIBRARY}")    ENDIF (NOT HELLO_FIND_QUIETLY)ELSE (HELLO_FOUND)    # 如果设置了REQUIRED参数就报错    IF (HELLO_FIND_REQUIRED)        MESSAGE(FATAL_ERROR "Could not find hello library")    ENDIF (HELLO_FIND_REQUIRED)ENDIF (HELLO_FOUND)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、CMake常用变量"><a href="#八、CMake常用变量" class="headerlink" title="八、CMake常用变量"></a>八、<code>CMake</code>常用变量</h1><h2 id="1-cmake-变量引用的方式："><a href="#1-cmake-变量引用的方式：" class="headerlink" title="1.cmake 变量引用的方式："></a>1.<code>cmake</code> 变量引用的方式：</h2><p>使用${}进行变量的引用。在 IF 等语句中，是直接使用变量名而不通过${}取值</p><h2 id="2-cmake-自定义变量的方式："><a href="#2-cmake-自定义变量的方式：" class="headerlink" title="2.cmake 自定义变量的方式："></a>2.<code>cmake</code> 自定义变量的方式：</h2><p>主要有隐式定义和显式定义两种，前面举了一个隐式定义的例子，就是 PROJECT 指令，他会隐式的定义<projectname>_BINARY_DIR 和<projectname>_SOURCE_DIR 两个变量。<br>显式定义的例子我们前面也提到了，使用 SET 指令，就可以构建一个自定义变量了。比如:</projectname></projectname></p><p>SET(HELLO_SRC main.SOURCE_PATHc)，就PROJECT_BINARY_DIR 可以通过${HELLO_SRC}来引用这个自定义变量了.</p><h2 id="3-cmake-常用变量"><a href="#3-cmake-常用变量" class="headerlink" title="3.cmake 常用变量"></a>3.<code>cmake</code> 常用变量</h2><h3 id="1-CMAKE-BINARY-DIR-PROJECT-BINARY-DIR-BINARY-DIR"><a href="#1-CMAKE-BINARY-DIR-PROJECT-BINARY-DIR-BINARY-DIR" class="headerlink" title="1. CMAKE_BINARY_DIR/PROJECT_BINARY_DIR/_BINARY_DIR_"></a>1. CMAKE_BINARY_DIR/PROJECT_BINARY_DIR/<projectname>_BINARY_DIR_</projectname></h3><p>这三个变量指代的内容是一致的，如果是 in source 编译，指得就是工程顶层目录，如果是 out-of-source 编译，指的是工程编译发生的目录。PROJECT_BINARY_DIR 跟其他指令稍有区别，现在，你可以理解为他们是一致的。</p><h3 id="2-CMAKE-SOURCE-DIR-PROJECT-SOURCE-DIR-SOURCE-DIR"><a href="#2-CMAKE-SOURCE-DIR-PROJECT-SOURCE-DIR-SOURCE-DIR" class="headerlink" title="2. CMAKE_SOURCE_DIR/PROJECT_SOURCE_DIR/_SOURCE_DIR"></a>2. CMAKE_SOURCE_DIR/PROJECT_SOURCE_DIR/<projectname>_SOURCE_DIR</projectname></h3><p>这三个变量指代的内容是一致的，不论采用何种编译方式，都是工程顶层目录。</p><h3 id="3-CMAKE-CURRENT-SOURCE-DIR"><a href="#3-CMAKE-CURRENT-SOURCE-DIR" class="headerlink" title="3. CMAKE_CURRENT_SOURCE_DIR"></a>3. CMAKE_CURRENT_SOURCE_DIR</h3><p>指的是<strong>当前处理的</strong> CMakeLists.txt 所在的路径</p><h3 id="4-CMAKE-CURRRENT-BINARY-DIR"><a href="#4-CMAKE-CURRRENT-BINARY-DIR" class="headerlink" title="4. CMAKE_CURRRENT_BINARY_DIR"></a>4. CMAKE_CURRRENT_BINARY_DIR</h3><p>如果是 in-source 编译，它跟 CMAKE_CURRENT_SOURCE_DIR 一致，如果是 out-ofsource 编译，他指的是 target 编译目录。<br>使用我们上面提到的 ADD_SUBDIRECTORY(src bin)可以更改这个变量的值。<br>使用 SET(EXECUTABLE_OUTPUT_PATH &lt;新路径&gt;)并不会对这个变量造成影响，它仅仅修改了最终目标文件存放的路径。</p><h3 id="５-CMAKE-CURRENT-LIST-FILE"><a href="#５-CMAKE-CURRENT-LIST-FILE" class="headerlink" title="５. CMAKE_CURRENT_LIST_FILE"></a>５. CMAKE_CURRENT_LIST_FILE</h3><p>​    输出调用这个变量的 CMakeLists.txt 的完整路径</p><h3 id="6-CMAKE-CURRENT-LIST-LINE"><a href="#6-CMAKE-CURRENT-LIST-LINE" class="headerlink" title="6. CMAKE_CURRENT_LIST_LINE"></a>6. CMAKE_CURRENT_LIST_LINE</h3><p>​    输出这个变量所在的行</p><h3 id="7-CMAKE-MODULE-PATH"><a href="#7-CMAKE-MODULE-PATH" class="headerlink" title="7. CMAKE_MODULE_PATH"></a>7. CMAKE_MODULE_PATH</h3><p>这个变量用来定义自己的 cmake 模块所在的路径。如果你的工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随你的工程发布的，为了让 cmake 在处理CMakeLists.txt 时找到这些模块，你需要通过 SET 指令，将自己的 cmake 模块路径设<br>置一下。比如<br>SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)<br>这时候你就可以通过 INCLUDE 指令来调用自己的模块了。</p><h3 id="8-EXECUTABLE-OUTPUT-PATH-和-LIBRARY-OUTPUT-PATH"><a href="#8-EXECUTABLE-OUTPUT-PATH-和-LIBRARY-OUTPUT-PATH" class="headerlink" title="8. EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH"></a>8. EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH</h3><p>分别用来重新定义最终结果的存放目录，前面我们已经提到了这两个变量。</p><h3 id="9-PROJECT-NAME"><a href="#9-PROJECT-NAME" class="headerlink" title="9. PROJECT_NAME"></a>9. PROJECT_NAME</h3><p>返回通过 PROJECT 指令定义的项目名称。</p><h2 id="4-cmake-调用环境变量的方式"><a href="#4-cmake-调用环境变量的方式" class="headerlink" title="4. cmake 调用环境变量的方式"></a>4. cmake 调用环境变量的方式</h2><p>使用$ENV{NAME}指令就可以调用系统的环境变量了。<br>比如MESSAGE(STATUS “HOME dir: $ENV{HOME}”)<br>设置环境变量的方式是：SET(ENV{变量名} 值)</p><h3 id="1-CMAKE-INCLUDE-CURRENT-DIR"><a href="#1-CMAKE-INCLUDE-CURRENT-DIR" class="headerlink" title="1. CMAKE_INCLUDE_CURRENT_DIR"></a>1. CMAKE_INCLUDE_CURRENT_DIR</h3><p>自动添加 CMAKE_CURRENT_BINARY_DIR 和 CMAKE_CURRENT_SOURCE_DIR 到当前处理<br>的 CMakeLists.txt。相当于在每个 CMakeLists.txt 加入：<br>INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}<br>${CMAKE_CURRENT_SOURCE_DIR})</p><h3 id="2-CMAKE-INCLUDE-DIRECTORIES-PROJECT-BEFORE"><a href="#2-CMAKE-INCLUDE-DIRECTORIES-PROJECT-BEFORE" class="headerlink" title="2. CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE"></a>2. CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE</h3><p>将工程提供的头文件目录始终至于系统头文件目录的前面，当你定义的头文件确实跟系统发生冲突时可以提供一些帮助。</p><h3 id="3-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH-我们在上一节已经提及。"><a href="#3-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH-我们在上一节已经提及。" class="headerlink" title="3. CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH 我们在上一节已经提及。"></a>3. CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH 我们在上一节已经提及。</h3><h2 id="5-系统信息"><a href="#5-系统信息" class="headerlink" title="5. 系统信息"></a>5. 系统信息</h2><ol><li><p>CMAKE_MAJOR_VERSION，CMAKE 主版本号，比如 2.4.6 中的 2</p></li><li><p>CMAKE_MINOR_VERSION，CMAKE 次版本号，比如 2.4.6 中的 4</p></li><li><p>CMAKE_PATCH_VERSION，CMAKE 补丁等级，比如 2.4.6 中的 6</p></li><li><p>CMAKE_SYSTEM，系统名称，比如 Linux-2.6.22</p></li><li><p>CMAKE_SYSTEM_NAME，不包含版本的系统名，比如 Linux</p></li><li><p>CMAKE_SYSTEM_VERSION，系统版本，比如 2.6.22</p></li><li><p>CMAKE_SYSTEM_PROCESSOR，处理器名称，比如 i686.</p></li><li><p>UNIX，在所有的类 UNIX 平台为 TRUE，包括 OS X 和 cygwin</p></li><li><p>WIN32，在所有的 win32 平台为 TRUE，包括 cygwin</p></li></ol><h2 id="6-主要的开关选项："><a href="#6-主要的开关选项：" class="headerlink" title="6.主要的开关选项："></a>6.主要的开关选项：</h2><ol><li><p>CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS，用来控制 IF ELSE 语句的书写方式，在<br>下一节语法部分会讲到。</p></li><li><p>BUILD_SHARED_LIBS<br>这个开关用来控制默认的库编译方式，如果不进行设置，使用 ADD_LIBRARY 并没有指定库类型的情况下，默认编译生成的库都是静态库。<br>如果 SET(BUILD_SHARED_LIBS ON)后，默认生成的为动态</p></li><li><p>CMAKE_C_FLAGS<br>设置 C 编译选项，也可以通过指令 ADD_DEFINITIONS()添加。</p></li><li><p>CMAKE_CXX_FLAGS<br>设置 C++编译选项，也可以通过指令 ADD_DEFINITIONS()添加。</p></li></ol><h1 id="九、CMake常用指令"><a href="#九、CMake常用指令" class="headerlink" title="九、CMake常用指令"></a>九、<code>CMake</code>常用指令</h1><h2 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1. 基本指令"></a>1. 基本指令</h2><h3 id="MESSAGE"><a href="#MESSAGE" class="headerlink" title="MESSAGE"></a>MESSAGE</h3><pre class="line-numbers language-shell"><code class="language-shell">message([<mode>] "message to display" ...)可选<mode>关键字确定消息的类型:FATAL_ERROR    立即终止所有 cmake 过程SEND_ERROR 产生错误，生成过程被跳过WARNINGAUTHOR_WARNINGNOTICESTATUS    输出前缀为—的信息VERBOSEDEBUGTRACE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PROJECT"><a href="#PROJECT" class="headerlink" title="PROJECT"></a>PROJECT</h3><pre class="line-numbers language-shell"><code class="language-shell">project(<PROJECT-NAME> [<language-name>...])project(<PROJECT-NAME>        [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]        [LANGUAGES <language-name>...])设置项目的名称，并将其存储在变量中 PROJECT_NAME。从顶层调用时， CMakeLists.txt还将项目名称存储在变量CMAKE_PROJECT_NAME中。同时设置变量PROJECT_SOURCE_DIR， <PROJECT-NAME>_SOURCE_DIRPROJECT_BINARY_DIR， <PROJECT-NAME>_BINARY_DIRhttps://cmake.org/cmake/help/v3.15/command/project.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><pre class="line-numbers language-shell"><code class="language-shell">将普通变量，缓存变量或环境变量设置为给定值。指定<value>...占位符的此命令的签名期望零个或多个参数。多个参数将以分号分隔的列表形式加入，以形成要设置的实际变量值。零参数将导致未设置普通变量。unset() 命令显式取消设置变量。1、设置正常变量set(<variable> <value>... [PARENT_SCOPE])<variable>在当前函数或目录范围内设置给定值。如果PARENT_SCOPE给出了该选项，则将在当前作用域上方的作用域中设置变量。2、设置缓存变量set(<variable> <value>... CACHE <type> <docstring> [FORCE])3、设置环境变量set(ENV{<variable>} [<value>])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="add-executable"><a href="#add-executable" class="headerlink" title="add_executable"></a>add_executable</h3><pre class="line-numbers language-shell"><code class="language-shell">使用指定的源文件生成可执行文件add_executable(<name> [WIN32] [MACOSX_BUNDLE]               [EXCLUDE_FROM_ALL]               [source1] [source2 ...])<name>可执行文件名, <name>与逻辑目标名称相对应，并且在项目中必须是全局唯一的。构建的可执行文件的实际文件名是基于本机平台（例如<name>.exe或<name>）的约定构造的 。默认情况下，将在与调用命令的源树目录相对应的构建树目录中创建可执行文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="add-subdirectory"><a href="#add-subdirectory" class="headerlink" title="add_subdirectory"></a>add_subdirectory</h3><pre><code>在构建中添加一个子目录。add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])将一个子目录添加到构建中。source_dir指定源CMakeLists.txt和代码文件所在的目录。binary_dir指定了输出文件放置的目录以及编译输出的路径。EXCLUDE_FROM_ALL 参数的含义是将这个目录从编译过程中排除，比如，工程的 example，可能就需要工程构建完成后，再进入 example 目录单独进行构建(当然，你也可以通过定义依赖来解决此类问题)。如果没有指定binary_dir,那么编译结果(包括中间结果)都将存放在build/source_dir 目录(这个目录跟原有的 source_dir 目录对应)，指定binary_dir 目录后，相当于在编译时将 source_dir 重命名为binary_dir，所有的中间结果和目标二进制都将存放在binary_dir 目录。</code></pre><h3 id="subdirs"><a href="#subdirs" class="headerlink" title="subdirs"></a>subdirs</h3><pre><code>构建多个子目录subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...]        [PREORDER] )不论是 SUBDIRS 还是 ADD_SUBDIRECTORY 指令(不论是否指定编译输出目录)，我们都可以通过 SET 指令重新定义EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量来指定最终的目标二进制的位置(指最终生成的 hello 或者最终的共享库，不包含编译生成的中间文件)SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)在第一节我们提到了&lt;projectname&gt;_BINARY_DIR 和 PROJECT_BINARY_DIR 变量，他们指的编译发生的当前目录，如果是内部编译，就相当于 PROJECT_SOURCE_DIR 也就是工程代码所在目录，如果是外部编译，指的是外部编译所在目录，也就是本例中的两个指令分别定义了：可执行二进制的输出路径为 build/bin 和库的输出路径为 build/lib.</code></pre><h3 id="add-library"><a href="#add-library" class="headerlink" title="add_library"></a>add_library</h3><pre><code>ADD_LIBRARY(libname [SHARED|STATIC|MODULE][EXCLUDE_FROM_ALL]source1 source2 ... sourceN)你不需要写全 libhello.so，只需要填写 hello 即可，cmake 系统会自动为你生成libhello.X类型有三种:SHARED，动态库STATIC，静态库MODULE，在使用 dyld 的系统有效，如果不支持 dyld，则被当作 SHARED 对待。EXCLUDE_FROM_ALL 参数的意思是这个库不会被默认构建，除非有其他的组件依赖或者手工构建。</code></pre><h3 id="include-directories"><a href="#include-directories" class="headerlink" title="include_directories"></a>include_directories</h3><pre><code>将include目录添加到构建中include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])将给定目录添加到编译器用于搜索头文件的路径中。这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的后面，你可以通过两种方式来进行控制搜索路径添加的方式：１，CMAKE_INCLUDE_DIRECTORIES_BEFORE，通过 SET 这个 cmake 变量为 on，可以将添加的头文件搜索路径放在已有路径的前面。２，通过 AFTER 或者 BEFORE 参数，也可以控制是追加还是置前。</code></pre><h3 id="target-link-libraries-amp-link-directories"><a href="#target-link-libraries-amp-link-directories" class="headerlink" title="target_link_libraries &amp; link_directories"></a>target_link_libraries &amp; link_directories</h3><pre><code>TARGET_LINK_LIBRARIES(target library1&lt;debug | optimized&gt; library2...)这个指令可以用来为 target 添加需要链接的共享库，本例中是一个可执行文件，但是同样可以用于为自己编写的共享库添加共享库链接。为了解决我们前面遇到的 HelloFunc 未定义错误，我们需要作的是向src/CMakeLists.txt 中添加如下指令：TARGET_LINK_LIBRARIES(main hello)也可以写成TARGET_LINK_LIBRARIES(main libhello.so)</code></pre><h3 id="ADD-DEFINITIONS"><a href="#ADD-DEFINITIONS" class="headerlink" title="ADD_DEFINITIONS"></a>ADD_DEFINITIONS</h3><p>向 C/C++编译器添加-D 定义，比如:<br>ADD_DEFINITIONS(-DENABLE_DEBUG -DABC)，参数之间用空格分割。<br>如果你的代码中定义了#ifdef ENABLE_DEBUG #endif，这个代码块就会生效。如果要添加其他的编译器开关，可以通过 CMAKE_C_FLAGS 变量和 CMAKE_CXX_FLAGS 变量设置。</p><h3 id="ADD-DEPENDENCIES"><a href="#ADD-DEPENDENCIES" class="headerlink" title="ADD_DEPENDENCIES"></a>ADD_DEPENDENCIES</h3><p>定义 target 依赖的其他 target，确保在编译本 target 之前，其他的 target 已经被构建。<br>ADD_DEPENDENCIES(target-name depend-target1<br>depend-target2 …)</p><h3 id="ADD-TEST-与-ENABLE-TESTING-指令。"><a href="#ADD-TEST-与-ENABLE-TESTING-指令。" class="headerlink" title="ADD_TEST 与 ENABLE_TESTING 指令。"></a>ADD_TEST 与 ENABLE_TESTING 指令。</h3><p>ENABLE_TESTING 指令用来控制 Makefile 是否构建 test 目标，涉及工程所有目录。语法很简单，没有任何参数，ENABLE_TESTING()，一般情况这个指令放在工程的主CMakeLists.txt 中.<br>ADD_TEST 指令的语法是:<br>    <code>ADD_TEST(testname Exename arg1 arg2 ...)</code><br>testname 是自定义的 test 名称，Exename 可以是构建的目标文件也可以是外部脚本等等。后面连接传递给可执行文件的参数。如果没有在同一个 CMakeLists.txt 中打开<br>    ENABLE_TESTING()指令，任何 ADD_TEST 都是无效的。<br>比如我们前面的 Helloworld 例子，可以在工程主 CMakeLists.txt 中添加</p><p>ADD_TEST(mytest ${PROJECT_BINARY_DIR}/bin/main)<br>ENABLE_TESTING()<br>生成 Makefile 后，就可以运行 make test 来执行测试了。</p><h3 id="AUX-SOURCE-DIRECTORY"><a href="#AUX-SOURCE-DIRECTORY" class="headerlink" title="AUX_SOURCE_DIRECTORY"></a>AUX_SOURCE_DIRECTORY</h3><p>基本语法是：<br>AUX_SOURCE_DIRECTORY(dir VARIABLE)<br>作用是发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来<br>自动构建源文件列表。因为目前 cmake 还不能自动发现新添加的源文件。<br>比如<br>AUX_SOURCE_DIRECTORY(. SRC_LIST)<br>ADD_EXECUTABLE(main ${SRC_LIST})<br>你也可以通过后面提到的 FOREACH 指令来处理这个 LIST</p><p>###　CMAKE_MINIMUM_REQUIRED</p><p>其语法为 CMAKE_MINIMUM_REQUIRED(VERSION versionNumber [FATAL_ERROR])<br>比如 CMAKE_MINIMUM_REQUIRED(VERSION 2.5 FATAL_ERROR)<br>如果 cmake 版本小与 2.5，则出现严重错误，整个过程中止。</p><h3 id="EXEC-PROGRAM"><a href="#EXEC-PROGRAM" class="headerlink" title="EXEC_PROGRAM"></a>EXEC_PROGRAM</h3><p>在 CMakeLists.txt 处理过程中执行命令，并不会在生成的 Makefile 中执行。具体语法为：</p><pre class="line-numbers language-shell"><code class="language-shell">EXEC_PROGRAM(Executable [directory in which to run][ARGS <arguments to executable>][OUTPUT_VARIABLE <var>][RETURN_VALUE <var>])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用于在指定的目录运行某个程序，通过 ARGS 添加参数，如果要获取输出和返回值，可通过OUTPUT_VARIABLE 和 RETURN_VALUE 分别定义两个变量.<br>这个指令可以帮助你在 CMakeLists.txt 处理过程中支持任何命令，比如根据系统情况去修改代码文件等等。<br>举个简单的例子，我们要在 src 目录执行 ls 命令，并把结果和返回值存下来。<br>可以直接在 src/CMakeLists.txt 中添加：<br>EXEC_PROGRAM(ls ARGS “<em>.c” OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE)<br>IF(not LS_RVALUE)<br>    MESSAGE(STATUS “ls result: “ ${LS_OUTPUT})<br>ENDIF(not LS_RVALUE)<br>在 cmake 生成 Makefile 的过程中，就会执行 ls 命令，如果返回 0，则说明成功执行，<br>那么就输出 ls </em>.c 的结果。关于 IF 语句，后面的控制指令会提到。</p><h3 id="FILE-指令"><a href="#FILE-指令" class="headerlink" title="FILE 指令"></a>FILE 指令</h3><p>文件操作指令，基本语法为:</p><pre class="line-numbers language-shell"><code class="language-shell">FILE(WRITE filename "message to write"... )FILE(APPEND filename "message to write"... )FILE(READ filename variable)FILE(GLOB variable [RELATIVE path] [globbingexpressions]...)FILE(GLOB_RECURSE variable [RELATIVE path][globbing expressions]...)FILE(REMOVE [directory]...)FILE(REMOVE_RECURSE [directory]...)FILE(MAKE_DIRECTORY [directory]...)FILE(RELATIVE_PATH variable directory file)FILE(TO_CMAKE_PATH path result)FILE(TO_NATIVE_PATH path result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的语法都比较简单，不在展开介绍了。</p><h3 id="INCLUDE-指令"><a href="#INCLUDE-指令" class="headerlink" title="INCLUDE 指令"></a>INCLUDE 指令</h3><p>用来载入 CMakeLists.txt 文件，也用于载入预定义的 cmake 模块.<br>    INCLUDE(file1 [OPTIONAL])<br>    INCLUDE(module [OPTIONAL])<br>OPTIONAL 参数的作用是文件不存在也不会产生错误。<br>你可以指定载入一个文件，如果定义的是一个模块，那么将在 CMAKE_MODULE_PATH 中搜索这个模块并载入。<br>载入的内容将在处理到 INCLUDE 语句是直接执行。</p><h2 id="2-控制指令："><a href="#2-控制指令：" class="headerlink" title="2. 控制指令："></a>2. 控制指令：</h2><h3 id="1-IF-指令"><a href="#1-IF-指令" class="headerlink" title="1. IF 指令"></a>1. IF 指令</h3><p>基本语法为：</p><pre class="line-numbers language-shell"><code class="language-shell">IF(expression)# THEN section.COMMAND1(ARGS ...)COMMAND2(ARGS ...)...ELSE(expression)# ELSE section.COMMAND1(ARGS ...)COMMAND2(ARGS ...)...ENDIF(expression)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外一个指令是 ELSEIF，总体把握一个原则，凡是出现 IF 的地方一定要有对应的<br>ENDIF.出现 ELSEIF 的地方，ENDIF 是可选的。<br>表达式的使用方法如下:<br>IF(var)，如果变量不是：空，0，N, NO, OFF, FALSE, NOTFOUND 或<br><var>_NOTFOUND 时，表达式为真。<br>IF(NOT var )，与上述条件相反。<br>IF(var1 AND var2)，当两个变量都为真是为真。<br>IF(var1 OR var2)，当两个变量其中一个为真时为真。<br>IF(COMMAND cmd)，当给定的 cmd 确实是命令并可以调用是为真。<br>IF(EXISTS dir)或者 IF(EXISTS file)，当目录名或者文件名存在时为真。<br>IF(file1 IS_NEWER_THAN file2)，当 file1 比 file2 新，或者 file1/file2 其中有一个不存在时为真，文件名请使用完整路径。<br>IF(IS_DIRECTORY dirname)，当 dirname 是目录时，为真。<br>IF(variable MATCHES regex)<br>IF(string MATCHES regex)<br>当给定的变量或者字符串能够匹配正则表达式 regex 时为真。比如：<br>IF(“hello” MATCHES “ell”)<br>MESSAGE(“true”)<br>ENDIF(“hello” MATCHES “ell”)<br>IF(variable LESS number)<br>IF(string LESS number)<br>IF(variable GREATER number)<br>IF(string GREATER number)<br>IF(variable EQUAL number)<br>IF(string EQUAL number)<br>数字比较表达式<br>IF(variable STRLESS string)<br>IF(string STRLESS string)<br>IF(variable STRGREATER string)<br>IF(string STRGREATER string)<br>IF(variable STREQUAL string)<br>IF(string STREQUAL string)<br>按照字母序的排列进行比较.<br>IF(DEFINED variable)，如果变量被定义，为真。<br>一个小例子，用来判断平台差异：<br>IF(WIN32)<br>MESSAGE(STATUS “This is windows.”)</var></p><p>#作一些 Windows 相关的操作<br>ELSE(WIN32)<br>MESSAGE(STATUS “This is not windows”)</p><p>#作一些非 Windows 相关的操作<br>ENDIF(WIN32)<br>上述代码用来控制在不同的平台进行不同的控制，但是，阅读起来却并不是那么舒服，<br>ELSE(WIN32)之类的语句很容易引起歧义。<br>这就用到了我们在“常用变量”一节提到的 CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS 开<br>关。<br>可以 SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)<br>这时候就可以写成:<br>IF(WIN32)<br>ELSE()<br>ENDIF()<br>如果配合 ELSEIF 使用，可能的写法是这样:<br>IF(WIN32)</p><p>#do something related to WIN32<br>ELSEIF(UNIX)</p><p>#do something related to UNIX<br>ELSEIF(APPLE)</p><p>#do something related to APPLE<br>ENDIF(WIN32)</p><h3 id="2-WHILE"><a href="#2-WHILE" class="headerlink" title="2. WHILE"></a>2. WHILE</h3><p>WHILE 指令的语法是：</p><pre class="line-numbers language-shell"><code class="language-shell">WHILE(condition)COMMAND1(ARGS ...)COMMAND2(ARGS ...)...ENDWHILE(condition)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其真假判断条件可以参考 IF 指令。</p><h3 id="3-FOREACH"><a href="#3-FOREACH" class="headerlink" title="3. FOREACH"></a>3. FOREACH</h3><p>FOREACH 指令的使用方法有三种形式：</p><pre class="line-numbers language-shell"><code class="language-shell">1，列表FOREACH(loop_var arg1 arg2 ...)COMMAND1(ARGS ...)COMMAND2(ARGS ...)...ENDFOREACH(loop_var)像我们前面使用的 AUX_SOURCE_DIRECTORY 的例子AUX_SOURCE_DIRECTORY(. SRC_LIST)FOREACH(F ${SRC_LIST})MESSAGE(${F})ENDFOREACH(F)2，范围FOREACH(loop_var RANGE total)ENDFOREACH(loop_var)从 0 到 total 以１为步进举例如下：FOREACH(VAR RANGE 10)MESSAGE(${VAR})ENDFOREACH(VAR)最终得到的输出是：0 1 2 3 4 5 6 7 8 910３，范围和步进FOREACH(loop_var RANGE start stop [step])ENDFOREACH(loop_var)从 start 开始到 stop 结束，以 step 为步进，举例如下FOREACH(A RANGE 5 15 3)MESSAGE(${A})ENDFOREACH(A)最终得到的结果是：5 81114这个指令需要注意的是，知道遇到 ENDFOREACH 指令，整个语句块才会得到真正的执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、参考"><a href="#十、参考" class="headerlink" title="十、参考"></a>十、参考</h1><ol><li>[<a href="http://file.ncnynl.com/ros/CMake%20Practice.pdf]" target="_blank" rel="noopener">http://file.ncnynl.com/ros/CMake%20Practice.pdf]</a>(<a href="http://file.ncnynl.com/ros/CMake" target="_blank" rel="noopener">http://file.ncnynl.com/ros/CMake</a> Practice.pdf)</li><li><a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html" target="_blank" rel="noopener">https://cmake.org/cmake/help/latest/guide/tutorial/index.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
            <tag> Make </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建</title>
      <link href="/2019/11/15/hexo-github-bo-ke-da-jian/"/>
      <url>/2019/11/15/hexo-github-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4913023&auto=1&height=66"></iframe><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    <strong>准备工作</strong></p><ul><li>Github账号</li><li>node.js、hexo、npm安装</li></ul><h1 id="一、安装node-js"><a href="#一、安装node-js" class="headerlink" title="一、安装node.js"></a>一、安装node.js</h1><ol><li><p>下载windows版node.js</p><p>下载地址: <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>选择Windows Installer(.msi) 64-bit</p></li><li><p>双击node-v12.13.0-x64.msi, 一直next安装完成</p></li><li><p>测试是否安装成功</p><p>win+R键，输入cmd,然后回车，打开cmd窗口</p><p>输入node -v     显示node.js版本</p><p>输入npm -v     显示npm版本</p><p>安装完成</p></li></ol><h1 id="二、安装hexo"><a href="#二、安装hexo" class="headerlink" title="二、安装hexo"></a>二、安装hexo</h1><ol><li><p>先创建hexo的安装目录, 例如:  F:\LearnSpace\Blog</p></li><li><p>cd Blob  进入Blob目录</p></li><li><p>npm install hexo-cli -g    安装hexo</p></li><li><p>hexo -v  验证是否安装成功</p></li><li><p>npm init blog    初始化blog文件夹，存放博客</p></li><li><p>npm install 安装必备组件</p></li><li><p>cd blog</p></li><li><p>hexo g    生成静态网页</p></li><li><p>hexo s     打开本地服务器</p></li><li><p><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>    打开网页</p></li><li><p>ctrl + c   关闭本地服务器</p></li></ol><h1 id="三、连接Github与本地"><a href="#三、连接Github与本地" class="headerlink" title="三、连接Github与本地"></a>三、连接Github与本地</h1><ol><li><p>新建一个名为<code>你的github用户名.github.io</code>的仓库，比如说，如果你的<code>Github</code>用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是<code>http://test.github.io</code> 了。</p><p>点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>, 就会像下面一样</p><p><img src="2.png" alt></p></li><li><p>修改配置文件</p><p>编辑blog根目录下的<code>_config.yml</code>, 修改最后一行的配置</p></li></ol><pre><code>deploy:  type: git  repository: https://github.com/981935539/981935539.github.io.git  branch: master</code></pre><ol start="3"><li>安装Git部署插件: <code>npm install hexo-deployer-git --save</code></li></ol><h1 id="四、编辑第一篇博客"><a href="#四、编辑第一篇博客" class="headerlink" title="四、编辑第一篇博客"></a>四、编辑第一篇博客</h1><pre><code>hexo new post &quot;first-article&quot;  # 创建第一篇博客hexo g  # 生成静态网页hexo s  # 本地预览效果hexo d  # 上传github</code></pre><p>此时可以在github.io主页就能看到发布的文章啦。</p><h1 id="五、绑定域名"><a href="#五、绑定域名" class="headerlink" title="五、绑定域名"></a>五、绑定域名</h1><ol><li>以阿里云为例，如下图所示，添加两条解析记录:</li></ol><p>​    <img src="1.png" alt></p><ol start="2"><li><p>然后打开你的Github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存</p></li><li><p>这时候你的<code>F:\LearnSpace\Blog\blob\source</code> 会出现一个CNAME的文件</p></li><li><p>如果没有CNAME文件</p><p>打开你本地博客<code>/source</code>目录，我的是<code>F:\LearnSpace\Blog\blob\source</code>，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。最后运行<code>hexo g</code>、<code>hexo d</code>上传到Github。</p></li></ol><h1 id="六、hexo常用命令"><a href="#六、hexo常用命令" class="headerlink" title="六、hexo常用命令"></a>六、hexo常用命令</h1><pre><code>npm install hexo-cli -g      # 安装hexonpm uninstall hexo-cli -g      # 卸载hexohexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本# 缩写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy# 组合hexo s -g #生成并本地预览hexo d -g #生成并上传</code></pre><h1 id="七、写博客的规范"><a href="#七、写博客的规范" class="headerlink" title="七、写博客的规范"></a>七、写博客的规范</h1><ol><li><p>_config.yml</p><p>冒号后面必须有一个空格，否则会出问题</p></li><li><p>图片</p><p>引用图片需要把图片放在对应的文件夹中，只需要写文件名就可以了</p></li><li><p>文章头设置</p><p>模板在/scaffolds/post.md</p><pre><code>--- title: {{ title }} # 文章名称date: {{ date }} # 文章生成时间top: false cover: false password: toc: true mathjax: true summary: tags:-- [tag1]-- [tag2]-- [tag3]categories: -- [cat1]---</code></pre></li></ol><h1 id="八、备份博客源文件"><a href="#八、备份博客源文件" class="headerlink" title="八、备份博客源文件"></a>八、备份博客源文件</h1><p>​    博客已经搭建完成，但是博客仓库只是保存生成的静态网页文件，是没有博客源文件的，如果电脑出现了问题，那就麻烦了，所以源文件也需要备份一下。</p><ol><li><p>在<code>Github</code>上创建一个与本地仓库同名的仓库, 我的是<code>hexo-matery</code></p></li><li><p>初始化本地仓库</p><pre class="line-numbers language-shell"><code class="language-shell">git init       添加.gitignore文件.gitignore    .DS_Store    Thumbs.db    *.log    public/    .deploy*/    .vscode/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>连接到远程<code>Github</code>,</p><pre class="line-numbers language-shell"><code class="language-shell">git remote add github git@github.com:981935539/hexo-matery.gitgit fetchgit merge --allow-unrelated-histories github/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>推送本地源文件到<code>Github</code></p><pre class="line-numbers language-shell"><code class="language-shell">git add .git commit -m "第一次备份本地仓库"git push --set-upstream github master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p>现在在任何一台电脑上, 执行<code>git clonegit@github.com:981935539/hexo-matery.git</code></p><p>就可以把博客源文件复制到本地。</p></li></ol><h1 id="九、Ubuntu安装node-js和hexo"><a href="#九、Ubuntu安装node-js和hexo" class="headerlink" title="九、Ubuntu安装node.js和hexo"></a>九、Ubuntu安装node.js和hexo</h1><pre class="line-numbers language-shell"><code class="language-shell">tar -xvf node-v12.13.0-linux-x64.tar.xzsudo mv node-v12.13.0-linux-x64 /usr/localsudo ln -s /usr/local/node-v12.13.0-linux-x64/bin/node /usr/local/bin/nodesudo ln -s /usr/local/node-v12.13.0-linux-x64/bin/npm /usr/local/bin/npmsudo npm install -g hexosudo ln -s /usr/local/node-v12.13.0-linux-x64/bin/hexo /usr/local/bin/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、参考"><a href="#十、参考" class="headerlink" title="十、参考"></a>十、参考</h1><p>​    <a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-9" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-9</a></p><p>​    <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
